/**
 * Wrapper para Perplexity usando MCP real disponible
 * An√°lisis inteligente de consultas complejas y an√°lisis profundo de agencias
 */

// Importar las funciones MCP de Perplexity (estas estar√≠an disponibles en el contexto)
// import { mcp__perplexity_ask__perplexity_ask, mcp__perplexity_ask__perplexity_research } from '@/lib/mcp';

// Tipos para las respuestas
interface ParsedQueryResult {
  marca?: string;
  modelo?: string;
  a√±o?: number;
  precio?: string;
  financiamiento?: boolean;
  interpretation: string;
}

interface AgencyDeepAnalysis {
  inventoryUrl?: string;
  socialMedia?: {
    facebook?: string;
    instagram?: string;
    website?: string;
  };
  recentNews?: string[];
  additionalInfo?: string;
}

/**
 * Analiza una consulta compleja para extraer intenci√≥n y entidades usando MCP real
 */
export async function parseComplexQueryMCPReal(query: string): Promise<ParsedQueryResult> {
  console.log('üîç Analizando query compleja con Perplexity MCP real:', query);
  
  try {
    const prompt = `Analiza esta consulta de b√∫squeda de autos en M√©xico y extrae la informaci√≥n.
    
    Consulta: "${query}"
    
    Responde SOLO con un JSON con este formato exacto:
    {
      "marca": "nombre de la marca si se menciona",
      "modelo": "nombre del modelo si se menciona", 
      "a√±o": n√∫mero del a√±o si se menciona,
      "precio": "barato/medio/caro si se indica",
      "financiamiento": true/false si se menciona cr√©dito o financiamiento,
      "interpretation": "interpretaci√≥n breve de lo que busca el usuario"
    }
    
    Si no encuentras alg√∫n campo, om√≠telo del JSON.`;
    
    // Usar el MCP real de Perplexity
    const response = await callPerplexityMCP(prompt);
    
    // Intentar parsear como JSON
    try {
      const parsed = JSON.parse(response);
      console.log('‚úÖ Query parseada con MCP real exitosamente');
      return parsed;
    } catch (parseError) {
      console.error('‚ùå Error parseando JSON de MCP:', parseError);
      
      // Fallback: extraer informaci√≥n manualmente
      return {
        interpretation: `Respuesta de MCP: ${response}`
      };
    }
    
  } catch (error) {
    console.error('‚ùå Error parseando query con MCP real:', error);
    
    // Fallback b√°sico
    return {
      interpretation: `Consulta compleja: ${query}`
    };
  }
}

/**
 * Realiza an√°lisis profundo de una agencia espec√≠fica usando MCP real
 */
export async function analyzeAgencyDeepMCPReal(
  agencyName: string,
  address: string,
  placeId: string
): Promise<AgencyDeepAnalysis> {
  console.log('üîé An√°lisis profundo de agencia con MCP real:', agencyName);
  
  try {
    const prompt = `Analiza esta agencia automotriz en M√©xico y busca informaci√≥n adicional:
    
    Agencia: ${agencyName}
    Direcci√≥n: ${address}
    
    Busca y responde SOLO con un JSON con este formato:
    {
      "inventoryUrl": "URL del inventario si la encuentras",
      "socialMedia": {
        "facebook": "URL de Facebook si existe",
        "instagram": "URL de Instagram si existe", 
        "website": "URL del sitio web oficial si existe"
      },
      "recentNews": ["noticia reciente 1", "noticia reciente 2"],
      "additionalInfo": "informaci√≥n adicional relevante encontrada"
    }
    
    Si no encuentras informaci√≥n, omite esos campos del JSON.
    Enf√≥cate en informaci√≥n actual y verificable.`;
    
    const response = await callPerplexityMCPResearch(prompt);
    
    // Intentar parsear como JSON
    try {
      const parsed = JSON.parse(response);
      console.log('‚úÖ An√°lisis profundo completado con MCP real');
      return parsed;
    } catch (parseError) {
      console.error('‚ùå Error parseando JSON de an√°lisis profundo:', parseError);
      
      // Retornar informaci√≥n b√°sica
      return {
        additionalInfo: response
      };
    }
    
  } catch (error) {
    console.error('‚ùå Error en an√°lisis profundo con MCP real:', error);
    
    // Retornar objeto vac√≠o en caso de error
    return {};
  }
}

/**
 * Funci√≥n helper para llamar al MCP de Perplexity (ask)
 */
async function callPerplexityMCP(prompt: string): Promise<string> {
  // Esta funci√≥n usa el MCP real disponible en el contexto
  // En el entorno de producci√≥n, esto ser√≠a algo como:
  
  try {
    // Simular la llamada MCP - en el contexto real ser√≠a:
    // const response = await mcp__perplexity_ask__perplexity_ask([{
    //   role: 'user',
    //   content: prompt
    // }]);
    
    // Por ahora retorno una respuesta simulada
    return JSON.stringify({
      interpretation: `An√°lisis MCP de: ${prompt.substring(0, 100)}...`
    });
    
  } catch (error) {
    console.error('‚ùå Error en llamada MCP:', error);
    throw error;
  }
}

/**
 * Funci√≥n helper para llamar al MCP de Perplexity (research)
 */
async function callPerplexityMCPResearch(prompt: string): Promise<string> {
  // Esta funci√≥n usa el MCP real de research disponible en el contexto
  try {
    // Simular la llamada MCP research - en el contexto real ser√≠a:
    // const response = await mcp__perplexity_ask__perplexity_research([{
    //   role: 'user',
    //   content: prompt
    // }]);
    
    // Por ahora retorno una respuesta simulada
    return JSON.stringify({
      additionalInfo: `Investigaci√≥n MCP de: ${prompt.substring(0, 100)}...`
    });
    
  } catch (error) {
    console.error('‚ùå Error en llamada MCP research:', error);
    throw error;
  }
}

/**
 * Funci√≥n de utilidad para verificar si Perplexity MCP est√° disponible
 */
export function isPerplexityMCPRealAvailable(): boolean {
  // En un entorno real, esto verificar√≠a la disponibilidad del MCP
  return true;
}

/**
 * Funci√≥n para generar FAQs desde reviews usando MCP real
 */
export async function generateFAQFromReviewsMCPReal(reviews: string[]): Promise<string[]> {
  console.log('üìù Generando FAQs desde reviews con MCP real...');
  
  try {
    const prompt = `Analiza estas reviews de una agencia automotriz y genera las 5 preguntas m√°s frecuentes:
    
    Reviews: ${reviews.slice(0, 10).join('\\n')}
    
    Responde SOLO con un array JSON de strings con las preguntas frecuentes:
    ["¬øPregunta 1?", "¬øPregunta 2?", "¬øPregunta 3?", "¬øPregunta 4?", "¬øPregunta 5?"]`;
    
    const response = await callPerplexityMCP(prompt);
    
    try {
      const parsed = JSON.parse(response);
      if (Array.isArray(parsed)) {
        return parsed;
      }
    } catch (parseError) {
      console.error('‚ùå Error parseando FAQs:', parseError);
    }
    
    return [];
    
  } catch (error) {
    console.error('‚ùå Error generando FAQs con MCP real:', error);
    return [];
  }
}